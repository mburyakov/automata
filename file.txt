class manual() {
update() ->  This.
}
class base(Arg:manual) {
update() ->
    the_method(Arg).
the_method(A) ->
    Arg + A.
}

class counter() {
  update() -> This + 1.
}

class linear(Arg:manual) {
update() ->
  Arg-1.
}

class switch() {
update() ->
  This.
}

class double(Arg1:manual, Arg2:manual, Sw:switch) extends linear(Arg1) as lin1, linear(Arg2) {
update() ->
  if
    Sw   -> lin1:update();
    true -> linear:update()
  end.
}

class next(Arg: double) {
update() ->
  Arg.
}

class cycle(Arg: cycle) {
update() ->
  if 
    Arg == 0 ->
      0;
    true ->
      Arg-1
  end.
}

begin

%B:double(X,Z,S) -> 2.

X:manual() -> 8.
Z:manual() -> 3.
S:switch() -> false.

A:cycle(B) -> 10.
B:cycle(A) -> 30.
